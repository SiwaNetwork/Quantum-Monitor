#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–≤–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã refactored_quantum_pci
"""

import sys
import os
import time
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "refactored_quantum_pci"))

def test_basic_import():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    try:
        from src.core.device import QuantumPCIDevice
        from src.api.status_reader import StatusReader
        print("   ‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–µ–Ω")
        return True
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_device_detection():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
    try:
        from src.core.device import QuantumPCIDevice
        from src.core.exceptions import DeviceNotFoundError
        
        try:
            device = QuantumPCIDevice()
            print("   ‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ")
            return device, True
        except DeviceNotFoundError:
            print("   ‚ö†Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)")
            return None, True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return None, False

def test_mock_device():
    """–¢–µ—Å—Ç —Å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
    print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mock_dir = Path("/tmp/test_quantum_device")
    try:
        mock_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        (mock_dir / "serialnum").write_text("TEST123456")
        (mock_dir / "available_clock_sources").write_text("GNSS IRIG EXTERNAL")
        (mock_dir / "clock_source").write_text("GNSS")
        (mock_dir / "gnss_sync").write_text("SYNC")
        (mock_dir / "available_sma_inputs").write_text("10Mhz PPS1 PPS2 None")
        (mock_dir / "available_sma_outputs").write_text("10Mhz PHC MAC None")
        
        # –ù–ï —Å–æ–∑–¥–∞–µ–º gen1-gen4 –∏ freq1-freq4 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
        
        from src.core.device import QuantumPCIDevice
        from src.api.status_reader import StatusReader
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
        device = QuantumPCIDevice(str(mock_dir))
        status_reader = StatusReader(device)
        
        print("   ‚úÖ –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ")
        return device, status_reader, True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return None, None, False

def test_capabilities_detection(status_reader):
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è capabilities"""
    print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è capabilities...")
    try:
        capabilities = status_reader.get_device_capabilities()
        print(f"   –ù–∞–π–¥–µ–Ω—ã capabilities: {capabilities}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if capabilities.get("basic") == True:
            print("   ‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
            
        if capabilities.get("signal_generators") == False:
            print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤")
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã")
            
        if capabilities.get("frequency_counters") == False:
            print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤")
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏")
            
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è capabilities: {e}")
        return False

def test_status_reading(status_reader):
    """–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è"""
    print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞...")
    try:
        start_time = time.time()
        
        # –ß–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        status = status_reader.get_full_status()
        
        elapsed = time.time() - start_time
        print(f"   –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
        
        if elapsed < 10:  # –ù–µ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
            print("   ‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á–∏—Ç–∞–Ω –±—ã—Å—Ç—Ä–æ (–Ω–µ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è)")
        else:
            print("   ‚ö†Ô∏è  –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–Ω—è–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç—É—Å–∞
        expected_keys = ["timestamp", "device_info", "device_capabilities", "clock_status", "sma_configuration", "health_status"]
        for key in expected_keys:
            if key in status:
                print(f"   ‚úÖ –ö–ª—é—á '{key}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –ö–ª—é—á '{key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if "generators" not in status:
            print("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å—Ç–∞—Ç—É—Å–∞")
        else:
            print("   ‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ (–Ω–µ –¥–æ–ª–∂–Ω—ã)")
            
        if "frequency_counters" not in status:
            print("   ‚úÖ –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å—Ç–∞—Ç—É—Å–∞")
        else:
            print("   ‚ùå –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ (–Ω–µ –¥–æ–ª–∂–Ω—ã)")
            
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def test_monitoring_loop(status_reader):
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ü–∏–∫–ª–µ"""
    print("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    try:
        start_time = time.time()
        iterations = 0
        max_iterations = 5
        
        print(f"   –ó–∞–ø—É—Å–∫ {max_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        while iterations < max_iterations:
            iteration_start = time.time()
            status = status_reader.get_full_status()
            iteration_time = time.time() - iteration_start
            
            iterations += 1
            print(f"   –ò—Ç–µ—Ä–∞—Ü–∏—è {iterations}: {iteration_time:.2f}—Å")
            
            if iteration_time > 5:  # –ï—Å–ª–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
                print("   ‚ö†Ô∏è  –ò—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
                break
                
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
        
        total_time = time.time() - start_time
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if total_time < 30:  # –î–æ–ª–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
            print("   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è")
            return True
        else:
            print("   ‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        import shutil
        test_dir = Path("/tmp/test_quantum_device")
        if test_dir.exists():
            shutil.rmtree(test_dir)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except:
        pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º—ã refactored_quantum_pci")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç
    results.append(test_basic_import())
    
    # –¢–µ—Å—Ç 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device, result = test_device_detection()
    results.append(result)
    
    # –¢–µ—Å—Ç 3: –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    mock_device, status_reader, result = test_mock_device()
    results.append(result)
    
    if mock_device and status_reader:
        # –¢–µ—Å—Ç 4: Capabilities
        results.append(test_capabilities_detection(status_reader))
        
        # –¢–µ—Å—Ç 5: –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        results.append(test_status_reading(status_reader))
        
        # –¢–µ—Å—Ç 6: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        results.append(test_monitoring_loop(status_reader))
    else:
        print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö")
        results.extend([False, False, False])
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    passed = sum(results)
    total = len(results)
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        return 1

if __name__ == "__main__":
    sys.exit(main())